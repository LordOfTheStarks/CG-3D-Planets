#version 450 core
out vec4 color; // Changed to vec4 for proper output

in vec3 fNormal;
in vec3 fPosition;
in vec3 fLight;
in vec2 UV;

uniform sampler2D myTextureSampler;

void main() {
    // Normalize vectors
    vec3 N = normalize(fNormal);
    vec3 L = normalize(fLight - fPosition);
    vec3 E = normalize(-fPosition);
    vec3 R = reflect(-L, N);
    
    // Material parameters
    vec3 materialColor = texture(myTextureSampler, UV).rgb;
    float ka = 0.2;   // Ambient coefficient (reduced)
    float kd = 0.7;   // Diffuse coefficient
    float ks = 0.1;   // Specular coefficient
    float shininess = 32.0;
    
    // Lighting calculations
    vec3 ambient = ka * materialColor;
    
    float diff = max(dot(N, L), 0.0);
    vec3 diffuse = kd * diff * materialColor;
    
    float spec = pow(max(dot(E, R), 0.0), shininess);
    vec3 specular = ks * spec * vec3(1.0); // White specular highlights
    
    // Combine all components
    vec3 finalColor = ambient + diffuse + specular;
    
    // Ensure color values are in valid range
    finalColor = clamp(finalColor, 0.0, 1.0);
    
    // Output final color with full opacity
    color = vec4(finalColor, 1.0);
}