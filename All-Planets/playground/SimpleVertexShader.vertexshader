#version 450 core

// Inputs from vertex attributes
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

// Uniforms
uniform mat4 M; // Model matrix
uniform mat4 V; // View matrix
uniform mat4 P; // Projection matrix
uniform vec3 SunPosition_worldspace; // Sun position
uniform int isSun; // Flag to identify sun

// Outputs to fragment shader
out vec3 fNormal; 
out vec3 fPosition;
out vec3 fLight;
out vec2 UV;
out float fIsSun; 

void main() {
    mat4 MV = V * M;
    mat4 MVP = P * V * M;
    
    // Transform vertex position to camera space
    vec4 positionHom = MV * vec4(vertexPosition_modelspace, 1.0);
    fPosition = positionHom.xyz;
    
    // Transform normals using the normal matrix
    mat3 normalMatrix = mat3(transpose(inverse(MV)));
    fNormal = normalMatrix * vertexNormal_modelspace;
    
    // Transform sun position to camera space
    vec4 sunPos = V * vec4(SunPosition_worldspace, 1.0);
    fLight = sunPos.xyz;

    // Final position
    gl_Position = MVP * vec4(vertexPosition_modelspace, 1.0);
    
    // Pass UV coordinates and sun flag
    UV = vertexUV;
    fIsSun = float(isSun); 
}