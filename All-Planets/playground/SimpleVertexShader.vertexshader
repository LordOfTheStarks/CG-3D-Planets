#version 450 core
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

uniform mat4 M;
uniform mat4 V;
uniform mat4 P;

out vec3 fNormal;
out vec3 fPosition;
out vec3 fLight;
out vec2 UV;

void main() {
    mat4 MV = V * M;
    mat4 MVP = P * V * M;
    
    // Transform position
    vec4 positionHom = MV * vec4(vertexPosition_modelspace, 1.0);
    fPosition = positionHom.xyz;
    
    // Transform normals using the normal matrix
    mat3 normalMatrix = mat3(transpose(inverse(MV)));
    fNormal = normalMatrix * vertexNormal_modelspace;
    
    // Light position (adjusted for better Earth illumination)
    vec4 lightHom = vec4(2000.0, 1000.0, 1000.0, 1.0); // Adjusted light position
    fLight = (V * lightHom).xyz;

    // Final position
    gl_Position = MVP * vec4(vertexPosition_modelspace, 1.0);
    
    // Pass UV coordinates
    UV = vertexUV;
}