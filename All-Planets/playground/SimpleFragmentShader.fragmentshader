// SimpleFragmentShader.fragmentshader
#version 450 core
out vec4 color;

in vec3 fNormal;
in vec3 fPosition;
in vec3 fLight;
in vec2 UV;
in float fIsSun;

uniform sampler2D myTextureSampler;

void main() {
    if (fIsSun > 0.5) {
        vec3 sunColor = texture(myTextureSampler, UV).rgb;
        color = vec4(sunColor * 1.5, 1.0);
        return;
    }

    // Enhanced lighting for Earth and Moon
    vec3 N = normalize(fNormal);
    vec3 L = normalize(fLight - fPosition);
    vec3 E = normalize(-fPosition);
    vec3 R = reflect(-L, N);
    
    vec3 materialColor = texture(myTextureSampler, UV).rgb;
    
    // Basic lighting parameters
    float ka = 0.02;    // Keep very low ambient for darker shadows
    float kd = 2.0;     // Keep high diffuse for brighter lit areas
    float ks = 0.6;     // Keep original specular
    float shininess = 12.0; // Keep original shininess
    
    float distance = length(fLight - fPosition);
    float attenuation = 1.0 / (1.0 + 0.0000001 * distance * distance);
    
    vec3 ambient = ka * materialColor;
    float diff = max(dot(N, L), 0.0);
    vec3 diffuse = kd * diff * materialColor;
    
    float spec = pow(max(dot(E, R), 0.0), shininess);
    vec3 specular = ks * spec * vec3(1.0);
    
    vec3 finalColor = ambient + (diffuse + specular) * attenuation;
    
    // Simple contrast adjustment with slightly brighter shadows
    float minBrightness = 0.1; // Increased from 0.01 for more visible dark areas
    finalColor = max(finalColor * 1.8, materialColor * minBrightness);
    
    finalColor = clamp(finalColor, 0.0, 1.0);
    color = vec4(finalColor, 1.0);
}